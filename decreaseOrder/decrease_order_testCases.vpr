import "decrease_order.vpr"

method factorial(x: Int) returns (n: Int)
    requires x>=0
    ensures x == 0 || x==1 ==> n==1
    ensures x == 2 ==> n==2
    ensures x > 2 ==> n>=6
{
    if(x>0){
        n := factorial(x-1)
        assert bounded(x-1)
        assert decreasing(x-1,x)
        n := x * n
    }else{ //x==0
        n := 1
    }
} 

//Example decreasing Int
function fact(x:Int): Int
requires x>=0
//decreasing x
{
    x==0 ? 1 : x*fact(x-1) 
}

 method fact_termination_proof(x:Int)
     requires x>=0
{
     if(x==0){   
     }
     else{
         assert bounded(x-1)
         assert decreasing(x-1,x)
     }
}

//Example decreasing Reference
function references(r:Ref):Int
    //decreasing r
    {   
    r == null ? 1 : references(null)
}

method references_termination_proof(r:Ref)
{
    if(r == null){
    }
    else{
        assert bounded(null)
        assert decreasing(null,r)
    }
}

//Example decreasing Booleans
function booleans(b: Bool): Int
    ensures booleans(b) == 1
    //decreasing b
{
    b ? 1 : booleans(true)
}

method booleans_termination_proof(b: Bool)
{
    if(b){
    }
    else{
        assert bounded(true)
        assert decreasing(true,b)
    }
}

//Example decreasing Sequences (Integers)
function numberOfElements(seq:Seq[Int]): Int
    ensures numberOfElements(seq) == |seq|
    //decreasing seq
{
    |seq| != 0? 1+numberOfElements(seq[1..]) : 0
}

method numberOfElements_termination_proof(seq:Seq[Int]){
    if(|seq|==0){
    }
    else{
        assert |seq[1..]| >= 0
        assert bounded(seq[1..])
        assert decreasing(seq[1..],seq) //silicon cant prove
    }
}

////Example decreasing Sequences (Booleans)
function numberOfUsers(seq:Seq[Bool]): Int
    //decreases seq
{
    |seq| == 0 ? 0 :
        seq[0] ? 1 + numberOfUsers(seq[1..]) : numberOfUsers(seq[1..])
}

method numberOfUsers_termination_proof(seq:Seq[Bool]){
    if(|seq|==0){
    }
    else{
        assert bounded(seq[1..])
        assert decreasing(seq[1..],seq) //silicon cant prove
    }
}

//Example decreasing Set

function sets(s:Set[Int]):Int
//decreasing Set(1,2),s
{   
    |s|>0 && (|s| in s) ? sets(s setminus Set(|s|)) : 1
}

method sets_termination_proof(s:Set[Int]){
   if(|s|>0 && |s| in s){
       assert bounded(s setminus Set(|s|))
       assert decreasing(s setminus Set(|s|), s) //silicon cant prove
   }else{
   }
}

//Example decreasing MulitSet

function multiSets(s: Multiset[Int]) : Int
{
    |s|>0 && (|s| in s) > 0 ? multiSets(s setminus Multiset(|s|)) : 1
}

method multiSets_termination_proof(s: Multiset[Int]){
   if(|s|>0 && (|s| in s) > 0){
       assert bounded(s setminus Multiset(|s|))
       assert decreasing(s setminus Multiset(|s|), s) //silicon cant prove
   }else{
   }
}

method otherMultiSetTests(){
    assert bounded(Multiset(1))
    assert decreasing(Multiset(1),Multiset(1,1))  
    assert bounded(Multiset(1,2,3))
    assert decreasing(Multiset(1,2,3),Multiset(1,2,2,3,3))
    //assert decreasing(Multiset(1,1),Multiset(1,1))
    //assert decreasing(Multiset(1),Multiset(2))
}

//Example decreasing 2Tuple

// function tuple(t : Tuple2[Int,Int]) : Int
// requires first(t) >= 0
// {
//     first(t) > 1 ? tuple(tuple2Conn(first(t)-1,second(t)-1)) : 1
// }

// method tuples_termination_proof(t : Tuple2[Int,Int])
// requires first(t) >= 0
// {
//     if(first(t) > 1){
//         assert decreasing(tuple2Conn(first(t)-1,second(t)-1),t)
//     }else{
//     }
// }
