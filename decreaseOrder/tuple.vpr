domain Tuple2[A,B]{
    function tuple2Conn(a:A, b:B): Tuple2[A,B]
    
    function first2(t: Tuple2[A,B]): A
    function second2(t: Tuple2[A,B]): B

    //unique function type_first():A

    axiom conn2{
        forall t: Tuple2[A,B] :: {first2(t)} {second2(t)}
        t == tuple2Conn(first2(t), second2(t))       
    }

    axiom deConn2{
        forall a: A, b:B :: {tuple2Conn(a,b)}
        first2(tuple2Conn(a,b)) == a &&  
        second2(tuple2Conn(a,b)) == b      
    }

}

domain Tuple3[A,B,C]{
    function tuple3Conn(a:A, b:B, c:C): Tuple3[A,B,C]
    
    function first3(t: Tuple3[A,B,C]): A
    function second3(t: Tuple3[A,B,C]): B
    function third3(t: Tuple3[A,B,C]): C

    //unique function type_first():A

    axiom conn3{
        forall t: Tuple3[A,B,C] :: {first3(t)} {second3(t)} {third3(t)}
        t == tuple3Conn(first3(t), second3(t), third3(t))       
    }

    axiom deConn3{
        forall a: A, b:B , c:C :: {tuple3Conn(a,b,c)}
        first3(tuple3Conn(a,b,c)) == a &&  
        second3(tuple3Conn(a,b,c)) == b && 
        third3(tuple3Conn(a,b,c)) == c    
    }

}