field val: Int

domain Array {
    function loc(a: Array, i: Int): Ref
    function len(a: Array): Int
    function array(r: Ref): Array
    function index(r: Ref): Int

    axiom allDiff {
        forall a: Array, i: Int :: {loc(a, i)}
            array(loc(a, i)) == a && index(loc(a, i)) == i
    }

    axiom lenNonNeg {
        forall a: Array :: {len(a)}
        len(a) >= 0
    }
}

function add(l: Int, r: Int): Int
    ensures result == l+r


// this method checks the limitation caused from the matching loop prevention for filter combinations
method test1(a: Array)
    requires forall i: Int :: {loc(a, i).val} i >= 0 && i < 7 ==> acc(loc(a, i).val)
    requires len(a) == 7
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 0 || i == 6)} == 5 // f_2'
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 0 || i == 3 || i == 5 || i == 6)} == 5 // \bar{f_2}
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 0 || i == 1 || i == 2 || i == 4) } == 5 // f_1
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 2 || i == 3 || i == 6) } == 5 // f''
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && i >= 2 && i < 7} == 5 // f'
{
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && i >= 0 && i < 4} == 5
}

// this method checks that the limitations is very specific
method test2(a: Array)
    requires forall i: Int :: {loc(a, i).val} i >= 0 && i < 7 ==> acc(loc(a, i).val)
    requires len(a) == 7
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 0 || i == 6)} == 0 // f_2'
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 0 || i == 3 || i == 5 || i == 6)} == 0 // \bar{f_2}
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && (i == 0 || i == 1 || i == 2 || i == 4) } == 0 // f_1
    requires comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && i >= 4 && i < 7 } == 0
{
    // This should actually verify
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert comp[add, 0] i: Int, a1: Array :: {loc(a1, i).val | a1 == a && i >= 0 && i < 4} == 0
}