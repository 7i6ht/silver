domain Functions {
    function __learn_trigger__(b: Bool): Bool
    function exists_path(start:Ref, end:Ref): Bool
    function foo(start:Ref, end:Ref): Bool
}

method link_DAG_next(to:Ref)
    ensures (to != null) ==> (forall x:Ref, bad_var_name:Ref ::
        { exists_path(x,bad_var_name) }
            __learn_trigger__( foo(to,bad_var_name))) 

method append(bad_var_name:Ref) 
{
    var y : Ref
    assume bad_var_name != null
    link_DAG_next(bad_var_name)
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/262)
    assert exists_path(y,y) ==> __learn_trigger__(foo(bad_var_name,y)) // should pass
    //:: MissingOutput(assert.failed:assertion.false, /carbon/issue/262)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert exists_path(y,y) ==> __learn_trigger__(foo(y,y)) // should fail
}
