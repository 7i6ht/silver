// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// Rules for capture-avoiding substitution with bound variables:
//
// 1) (forall x : e)[x -> e’] = (forall x : e), where:
//
//   x is a bound variable in e, therefore there isn’t any free variable in e named ‘x’.
//   So the substitution x -> e’ does not change e.
//
// 2) (forall x : e)[y -> e’] = (forall z : e[x -> z][y -> e’]), where:
//   x != y
//   x belongs to vars(e’), where vars(e) is the set of free and bound variables in an expression e.
//   z does not belong to vars(e’) U vars(e) U {x, y} U scope, effectively z is said to be “fresh”.
//
// 3) (forall x : e)[y -> e’] = (forall x : e[y -> e’]), where:
//   x != y
//   x does not belong to vars(e’)

// Tests to enforce rule 3: (forall y : e)[x -> e’] = (forall y : e[x -> e’])

field f: Bool

function func3(x: Bool): Bool
    requires x && forall y: Ref :: acc(y.f)

method m3(x: Bool) returns (res: Bool)
    requires forall z: Ref :: acc(z.f)
    requires x == true
{
    res := func3(x)
}
