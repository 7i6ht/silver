function P(x: Int) : Bool {
    x == 0
}

function Q(x: Int) : Bool {
    x == 0
}

method m0()
{
    var z:Int := 0
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var y:Int := x+1
    }
    if (true) { var y:Int } // this should work -> two separate blocks
    // var y:Int := 0 //here duplicate identifier
}
method mIndirect()
{
    var z:Int := 0
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var y:Int := x+1
        z := y // Consistency error
    }
    // problem if here var y:Int := 0 -> this will also be in tainted set
    if (true) { var y:Int }
}

method mIfCnd()
{
    var z: Int := 0
    var y: Int := 0
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
            if(x>5) {
                z := 3
            } else {
                y := 5
            }
        }
}

method mIfNOK()
{
    var w :Int := 0
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var l :Int := 0
        if (l >= -1) {
            l := x
        } else {
            w := x
        }
    }
}

method mIfOK1()
{
    var w :Int := 0
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var l :Int := 0
        var g: Int := 0
        if (l >= -1) {
            g := x
        } else {
            w := 4
        }
    }
}

method mIfOK2()
{
    var w :Int := 0
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var l :Int := 0
        if (l >= -1) {
            l := x
        } else {
            w := 4 // should be SAFE
        }
    }
}

method mWhileCnd()
{
    var z: Int := 0
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
            while(x>5) {
                z := z+3
            }
        }
}

method mWhileOK()
{
    var z: Int := 0
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var y: Int := 0
        while(y<5) {
            z := z+3
            y := y+1
        }
    }
}

method mWhileOK2()
{
    var z: Int := 0
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        var y: Int := 0
        while(y<100) { // will only be tainted after the 5th? iteration
            var x4: Int := 0
            var x3: Int := 0
            var x2: Int := 0
            var x1: Int := 0
            z := x4
            x4 := x3
            x3 := x2
            x2 := x1
            x1 := x
            y := y+1
        }
    }
}

method mWhileNOK()
{
    var z: Int := 0
    //:: ExpectedOutput(consistency.error)
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        var y: Int := 0
        var x2: Int := 0
        var x1: Int := 0

        while(y<100) { // will only be tainted after the 5th? iteration
            z := x2
            x2 := x1
            x1 := x
            y := y+1
        }
    }
}

method mWhileNOK2()
{
    var z: Int := 0
    //:: ExpectedOutput(consistency.error)
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        var y: Int := x
        var x2: Int := 0
        var x1: Int := 0

        while(y<100) { // will only be tainted after the 5th? iteration
            z := x2
            x2 := x1
            y := y+1
        }
    }
}

method mcall()
{
    var y: Int := 0
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        mWhileOK()
    }
}

method example1(x:Int, y:Int) returns (res: Int)
influenced res by {x, y}
{
    res := x-y
}
  
method mMethodCallNOK1()
{
    var z: Int
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        z := example1(x,x)
    }
}

//code without influenced by statement
method example2(x:Int, y:Int) returns (res: Int)
{
    res := 0
}

method mMethodCallNOK2()
{
    var z: Int
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        z := example2(x,x)
    }
}

//code with influenced by statement 
method example3(x:Int, y:Int) returns (res: Int)
influenced res by {}
{
    res := 0
}

method mMethodCallOK1()
{
    var z: Int
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var y:Int := 3
        z := example3(y,y)
    }
}

//method with several return values 
method exampleMult(x:Int, y:Int) returns (diff:Int, id:Int)
influenced diff by {x, y}
influenced id by {x}
{
    diff := x-y
    id := x
}

method mMethodCallNOK3()
{
    var z: Int
    var w: Int
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var y: Int := 3
        z,w := exampleMult(y,x)
    }
}

method exampleIncomplete(b:Bool,c:Int) returns (z:Int, w:Int)
influenced w by {b}
{
    z := 3
    if (b) {
        w := w + 1
    }
}

method mMethodCallOK2()
{
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        var y:Int
        var v:Int
        var bool:Bool := true
        var count: Int := 16
        y,v := exampleIncomplete(bool,count)
    }
}


method mAssume()
{
    var m: Int := 0
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        assume(m==0)
    }
}

method mInhalingOK()
{
    var m: Int := 0
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        var y: Int := 0
        inhale (y==0)
    }
}

field f: Int

method mInhaleOK2(y: Ref)

{
    
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        inhale (acc(y.f))
    }
}

method mExhaleOK(y:Ref)
requires acc(y.f)
{
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        exhale acc(y.f)
    }
}


method mFieldAssignNOK1(y:Ref)
requires acc(y.f)
{
    //:: ExpectedOutput(consistency.error)
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        y.f := x
    }
}

method mFieldAssignNOK2(y:Ref) 
{
    var w: Int
    //:: ExpectedOutput(consistency.error)
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        var z: Int := x
        w := z
    }
}


method mFieldAssignOK1(y:Ref)
requires acc(y.f)
{
    var z: Int := 0
    prove forall x: Int {P(x)} assuming P(x) implies Q(x) {
        z := y.f
    }
}


function func1(x:Int) : Int
{
    x
}

method mFunctionOK()
{
    var z: Int := 3
    var y: Int
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        y := func1(z)
    }
}

method mFunctionNOK()
{
    var z: Int := 3
    var y: Int
    //:: ExpectedOutput(consistency.error)
    prove forall x:Int {P(x)} assuming P(x) implies Q(x) {
        y := func1(x)
    }
}
