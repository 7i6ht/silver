import "decreaseOrder/decrease_order.vpr"

function fun(r:Ref): Int
requires List(r)
//decreases unfolding List(r) in r.f
{
    unfolding List(r) in r.next == null ? 0 : fun(r.next)
}

predicate List(r:Ref) {
    acc(r.f) && acc(r.next) && (r.next != null ==> List(r.next))// && (r.next != null ==> unfolding List(r.next) in r.f > r.next.f) && r.f > 0
}
