//:: IgnoreFile(/silicon/issue/000000000000/)
field f: Int

predicate Cell(x: Ref) {
    acc(x.f)
}

function get(x: Ref): Int
requires Cell(x) {
    unfolding Cell(x) in x.f
}

method test0(x: Ref)
requires acc(x.f)
requires acc(x.f) --* acc(x.f)
ensures acc(x.f) && x.f == old(x.f) {
    apply acc(x.f) --* acc(x.f)
}

method test1(x: Ref)
requires acc(x.f)
requires acc(x.f) --* Cell(x)
ensures Cell(x) && get(x) == old(x.f) {
    apply acc(x.f) --* Cell(x)
}

method test2(x: Ref)
requires Cell(x)
requires Cell(x) --* acc(x.f)
ensures acc(x.f) && x.f == old(get(x)) {
    apply Cell(x) --* acc(x.f)
}

method test4(x: Ref)
requires acc(x.f)
ensures acc(x.f) && x.f == old(x.f) {
    inhale acc(x.f) --* acc(x.f)
    apply acc(x.f) --* acc(x.f)
}

method test5(x: Ref)
requires acc(x.f)
ensures acc(x.f) && x.f == old(x.f) {
    package true --* acc(x.f)
    package (true --* acc(x.f)) --* acc(x.f) {
        apply true --* acc(x.f)
    }
    apply (true --* acc(x.f)) --* acc(x.f)
}