field f: Int
field g: Int

predicate pair(x: Ref) {
    acc(x.f) && acc(x.g)
}

function sum(x: Ref): Int
requires pair(x) {
    unfolding pair(x) in x.f + x.g
}

method test0(x: Ref)
requires acc(x.f) && acc(x.g) {
    x.g := 1
    package acc(x.f) --* pair(x) {
        fold pair(x)
    }
    x.f := 2
    apply acc(x.f) --* pair(x)
    assert sum(x) == 3
}

method test1(x: Ref)
requires acc(x.f) && acc(x.g) {
    x.g := 1
    package acc(x.f) --* acc(x.f) && acc(x.g)
    x.f := 2
    apply acc(x.f) --* acc(x.f) && acc(x.g)
    assert x.f == 2 && x.g == 1
}

method test2(x: Ref)
requires acc(x.f) && acc(x.g) {
    x.f := 2
    x.g := 1
    fold pair(x)
    package true --* pair(x)
    apply true --* pair(x)
    assert sum(x) == 3
}